Q#1
#include <iostream>
using namespace std;
struct Activitiy
{
    int start, finish;
};
bool activityCompare(Activitiy s1, Activitiy s2)
{
    return (s1.finish < s2.finish);
}
void printMaxActivities(Activitiy arr[], int n)
{
    sort(arr, arr+n, activityCompare);
    cout << "Following activities are selected n";
    int i = 0;
    cout << "(" << arr[i].start << ", " << arr[i].finish << "), ";
    for (int j = 1; j < n; j++)
    {
      if (arr[j].start >= arr[i].finish)
      {
          cout << "(" << arr[j].start << ", "
              << arr[j].finish << "), ";
          i = j;
      }
    }
}
 
Q#2
#include <iostream>
using namespace std;
int equilibrium(int arr[], int n)
{
    int sum = 0; 
    int leftsum = 0; 
    for (int i = 0; i < n; ++i)
        sum += arr[i]; 
    for (int i = 0; i < n; ++i)
    {
        sum -= arr[i];  
        if (leftsum == sum)
            return i;
        leftsum += arr[i];
    }
    return -1;
}
 
Q# 3
 
#include <iostream>
using namespace std;
#define NO_OF_CHARS 256
 
int longestUniqueSubsttr(string str)
{
    int n = str.size();
 
    int res = 0; 
    vector<int> lastIndex(NO_OF_CHARS, -1);
    int i = 0;
    for (int j = 0; j < n; j++) {
        i = max(i, lastIndex[str[j]] + 1);
        res = max(res, j - i + 1);
        lastIndex[str[j]] = j;
    }
    return res;
}
 
Q# 4
#include <iostream>
using namespace std;
struct meeting {
    int start;
    int end;
    int pos;
};
bool comparator(struct meeting m1, meeting m2)
{
    return (m1.end < m2.end);
}
void maxMeeting(int s[], int f[], int n)
{
    struct meeting meet[n];
    for (int i = 0; i < n; i++)
    {
        meet[i].start = s[i];
        meet[i].end = f[i];
        meet[i].pos = i + 1;
    }
    sort(meet, meet + n, comparator);
    vector<int> m;
    m.push_back(meet[0].pos);
    int time_limit = meet[0].end;
    for (int i = 1; i < n; i++) {
        if (meet[i].start >= time_limit)
        {
            m.push_back(meet[i].pos);
            time_limit = meet[i].end;
        }
    }
    for (int i = 0; i < m.size(); i++) {
        cout << m[i] << " ";
    }
}
 int main()
{
   int s[] = { 1, 3, 0, 5, 8, 5 };
    int f[] = { 2, 4, 6, 7, 9, 9 };
    int n = sizeof(s) / sizeof(s[0]);
    maxMeeting(s, f, n);
    return 0;
}

